% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_api.R
\name{parse_api}
\alias{parse_api}
\title{Parse SQUIDLE API Response}
\usage{
parse_api(response, filetype = NULL, view_html = FALSE)
}
\arguments{
\item{response}{An \code{httr::response} object returned by a request or export call.}

\item{filetype}{Optional string specifying the expected response format. Defaults to automated extraction of file type from headers, or falls back to \code{"json"}.
Supported values are \code{"csv"}, \code{"json"}, \code{"html"}, and \code{"txt"}.}

\item{view_html}{Logical; if \code{TRUE} and \code{filetype = "html"}, opens the HTML in the default browser.}
}
\value{
A parsed R object:
\describe{
\item{csv}{A \code{data.frame}.}
\item{json}{A list or \code{data.frame}, depending on the JSON structure.}
\item{html}{Character string of HTML text, or invisibly a file path if \code{view_html = TRUE}.}
\item{txt}{A \code{data.frame}.}
}
}
\description{
Parses the response content from the SQUIDLE API. Attempts to retrieve file type from headers, otherwise falls back to json or user input file type.
Supports CSV, JSON, HTML, and TXT.
}
\details{
This function converts raw API responses into usable R data structures:
\describe{
\item{csv}{Parses CSV content using \code{read.csv()}.}
\item{json}{Parses JSON content using \code{jsonlite::fromJSON()}.}
\item{html}{Returns HTML text, or opens a temporary file if \code{view_html = TRUE}.}
\item{txt}{Parses tab-delimited content using \code{read.delim()}.}
}
}
\examples{
\dontrun{
# Example 1 - Export data as .csv with metadata
   # Create instance of SQAPI
api <- SQAPI$new()
   # Create filters
my_filters_1 <- query_filter(
  name = "events",
  op = "any",
  val = query_filter(name = "id", op = "is_not_null")
)
   # Create parameters
my_params_1 <- query_params(
  group_by = "pose.dep",
  include_columns = c(
    "id", "key", "path_best", "timestamp_start", "path_best_thm",
    "pose.timestamp", "pose.lat", "pose.lon", "pose.alt", "pose.dep",
    "pose.data", "pose.id", "deployment.key", "deployment.campaign.key",
    "deployment.id", "deployment.campaign.id", "event_log"
  )
)
   # Send request to export endpoint
r1 <- export(
  api = api,
  endpoint = "api/media_collection/13453/export",
  query_filters = my_filters_1,
  query_parameters = my_params_1,
  template = "data.csv",
  verb = "GET",
  metadata_filename = "my_metadata1.json"
)
   # Parse
p1 <- parse_api(r1, "csv")
}

}
