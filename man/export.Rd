% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/export.R
\name{export}
\alias{export}
\title{Make a GET Request to SQUIDLE API Export Endpoint}
\usage{
export(
  api,
  endpoint,
  query_filters = NULL,
  query_parameters = NULL,
  template = NULL,
  disposition = NULL,
  transform = FALSE,
  translate = NULL,
  poll = TRUE,
  write_disk = FALSE,
  filename = NULL,
  metadata_filename = "metadata.json"
)
}
\arguments{
\item{api}{An instance of \code{SQAPI}, containing properties \code{"host"} and \code{"auth"}.}

\item{endpoint}{A character string specifying the endpoint. See
"https://squidle.org/api/help?template=api_help_page.html" for endpoint details.}

\item{query_filters}{The output from \code{SQAPI::query_filter()}. A named list of filters.
These are appended to the url inside of the \code{q={}} json string.}

\item{query_parameters}{The output from \code{SQAPI::query_params()}. A list of two elements:
\describe{
\item{\code{q}}{A list of query parameters (e.g., \code{limit}, \code{offset}, \code{order_by}, \code{group_by}, \code{single})
to be encoded as JSON within the \code{q={}} string.}
\item{\code{qparams}}{A list of top-level query parameters (e.g., \code{include_columns}, \code{page}, \code{results_per_page})
that appear outside the \code{q={}} string.}
}}

\item{template}{Optional character string to specify the template to use (e.g., "data.csv"). Default is JSON.}

\item{disposition}{Optional character string to specify content disposition. Accepts \code{"attachment"} and \code{"inline"}.
See SQUIDLE API documentation for details on template and disposition.}

\item{transform}{Binary option to append f= query sting as per API GUI. Placeholder and testing tool.}

\item{translate}{Optional. List built using \code{SQAPI::translate()} function. See API documentation for details.}

\item{poll}{Logical. If \code{TRUE}, polls the status url until the result is ready. Defaults to \code{TRUE}.}

\item{write_disk}{Logical. If \code{TRUE}, writes the result to disk. Defaults to \code{FALSE}.}

\item{filename}{A character string specifying the output filename (required if \code{write_disk = TRUE}).}

\item{metadata_filename}{A character string specifying the name of the file to save metadata headers to.
Only used if a CSV is being downloaded. Defaults to \code{"metadata.json"}.}
}
\value{
If \code{poll = TRUE}, returns the final \code{httr::response} from the result url after polling the status url.
If \code{poll = FALSE}, returns the initial \code{httr::response} from the export request without polling the status url.
}
\description{
Sends a GET request to a specified SQUIDLE API export endpoint, with option for status polling and file write to disk.
It constructs the request URL with query filters and query parameters directly from the output of \code{SQAPI::query_filter()}
and \code{SQAPI::query_params}. It also includes authentication headers. It then initiates the export request, polls
the status url, and returns the result. Metadata headers are also written to a separate file if exporting CSV.
}
\details{
This function is used to export datasets from SQUIDLE API export endpoints. When \code{poll = TRUE},
it will repeatedly check the status url until the export is complete, displaying
a progress bar in the console. If \code{poll = FALSE}, the function returns immediately after the initial
request without checking the status or downloading the result.
This is useful for inspecting or debugging the initial export response manually.

If \code{write_disk = TRUE}, the response will be saved to the specified file, and optionally
metadata can be saved separately. If a CSV file is exported, relevant metadata from headers
will be extracted and saved.
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

# Example 1 - Export data as .csv with metadata
   # Create instance of SQAPI
api <- SQAPI$new()
   # Create filters
my_filters_1 <- query_filter(
  name = "events",
  op = "any",
  val = query_filter(name = "id", op = "is_not_null")
)
   # Create parameters
my_params_1 <- query_params(
  template = "data.csv",
  group_by = "pose.dep",
  include_columns = c(
    "id", "key", "path_best", "timestamp_start", "path_best_thm",
    "pose.timestamp", "pose.lat", "pose.lon", "pose.alt", "pose.dep",
    "pose.data", "pose.id", "deployment.key", "deployment.campaign.key",
    "deployment.id", "deployment.campaign.id", "event_log"
  )
)
   # Send request to export endpoint
r1 <- export(
  api = api,
  endpoint = "api/media_collection/13453/export",
  query_filters = my_filters_1,
  query_parameters = my_params_1,
  metadata_filename = "my_metadata1.json"
)

# Example 2 - Paginated request using limit and offset
   # Create instance of SQAPI
api <- SQAPI$new()
   # Create filters
my_filters_2 <- query_filter(
  name = "events",
  op = "any",
  val = query_filter(name = "id", op = "is_not_null")
)
   # Create parameters
my_params_2 <- query_params(limit = 100, offset = 20)

   # Send request to export endpoint
r2 <- export(
  api = api,
  endpoint = "api/media_collection/13453/export",
  query_filters = my_filters_2,
  query_parameters = my_params_2
)

# Example 3 - Export ordered data as .csv
 # Create instance of SQAPI
api <- SQAPI$new()
   # Create filters
my_filters_3 <- query_filter(
  name = "events",
  op = "any",
  val = query_filter(name = "id", op = "is_not_null")
)
   # Create parameters
my_params_3 <- query_params(
  template = "data.csv",
  order_by = c("pose.dep", "asc"),
  include_columns = c(
    "id", "key", "path_best", "timestamp_start", "path_best_thm",
    "pose.timestamp", "pose.lat", "pose.lon", "pose.alt", "pose.dep",
    "pose.data", "pose.id", "deployment.key", "deployment.campaign.key",
    "deployment.id", "deployment.campaign.id", "event_log"
  )
)
   # Send request to export endpoint
r3 <- export(
  api = api,
  endpoint = "api/media_collection/13453/export",
  query_filters = my_filters_3,
  query_parameters = my_params_3)

   # Send request and write to disk
r3_write_disk <- export(
 api = api,
  endpoint = "api/media_collection/13453/export",
  query_filters = my_filters_3,
  query_parameters = my_params_3,
  write_disk = TRUE,
  filename = "media_collection_13453.json",
  metadata_filename = "metadata3.json"
)
\dontshow{\}) # examplesIf}
}
